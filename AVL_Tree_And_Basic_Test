#include<iostream>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
using namespace std;
#define BinNodePosi(T) BinNode<T>*
#define stature(p) ((p)?(p)->height:-1)
#define IsRoot(x) !(x).parent
#define IsLChild(x) (!IsRoot(x)&& (&(x)==(x).parent->lc))
#define IsRChild(x) (!IsRoot(x)&& (&(x)==(x).parent->rc))
#define HasParent(x) !IsRoot(x)
#define HasLChild(x) (x).lc
#define HasRChild(x) (x).rc
#define HasChild(x) (x).lc||(x).rc
#define HasBothChild(x) (x).lc&&(x).rc
#define IsLeaf(x) !HasChild(x)
#define sibling(p)\
	IsLChild(x)? (x)->parent->rc:(x)->parent->lc
#define FromParentTo(x)\
	(IsRoot(x)?this->_root:(IsLChild(x)?(x).parent->lc:(x).parent->rc))
//for AVL tree
#define Balanced(x){stature((x).lc)==stature((x).rc);}
#define BalFac(x)(stature((x).lc)-stature((x).rc))
#define AvlBalanced(x) ((-2<BalFac(x))&&(BalFac(x)<2))
#define tallerChild(x)(\
stature((x)->lc)>stature((x)->rc)?(x)->lc:(\
stature((x)->lc)<stature((x)->rc)?(x)->rc:(\
IsLChild(*(x))?(x)->lc:(x)->rc\
)\
)\
)
typedef enum { RB_RED, RB_BLACK }RBCOLOR;
template<class T>
struct BinNode
{
	T data;
	BinNodePosi(T)parent; BinNodePosi(T)lc; BinNodePosi(T)rc;
	int height;
	int npl;
	RBCOLOR color;
	BinNode() :
		parent(NULL), lc(NULL), rc(NULL), height(0), npl(1), color(RB_RED) {};
	BinNode(T e, BinNodePosi(T) p = NULL, BinNodePosi(T) l = NULL, BinNodePosi(T) r = NULL, int h = 0, int np = 1, RBCOLOR c = RB_RED) :
		data(e), parent(p), lc(l), rc(r), height(h), npl(np), color(c) {}
	int size()
	{
		int s = 1;
		if (lc)
			s += lc->size();
		if (rc)
			s += rc->size();
		return s;
	}
	BinNodePosi(T)insertAsLc(T const& e)
	{
		return lc = new BinNode(e, this);
	}
	BinNodePosi(T)insertAsRc(T const& e)
	{
		return rc = new BinNode(e, this);
	}
	BinNodePosi(T)succ()
	{
		BinNodePosi(T)s = this;
		if (rc)
		{
			s = rc;
			while (s->lc)s = s->lc;
		}
		else
		{
			while (IsRChild(*s))s = s->parent;
			s = s->parent;
		}
		return s;
	}
	bool operator<(BinNode const& bn) { return data < bn.data; }
	bool operator==(BinNode const& bn) { return data == bn.data; }
	bool operator<=(BinNode const& bn) { return data <= bn.data; }
	bool operator>=(BinNode const& bn) { return data >= bn.data; }
	bool operator!=(BinNode const& bn) { return data != bn.data; }
};
template<class T>class BinTree
{
protected:
	int _size; BinNodePosi(T)_root;
	virtual int updateHeight(BinNodePosi(T)x)
	{
		return x->height = 1 + max(stature(x->lc), stature(x->rc));
	}
	void updateHeightAbove(BinNodePosi(T)x)
	{
		while (x)
		{
			int lasHeight = x->height;
			updateHeight(x);
			if (lasHeight == x->height)
				break;
			x = x->parent;
		}
	}
public:
	BinTree() :_size(0), _root(NULL) {}
	~BinTree() { if (0 < _size)remove(_root); }
	int size()const { return _size; }
	bool empty()const { return !_size; }
	BinNodePosi(T)root()const { return _root; }
	BinNodePosi(T)insertAsRoot(T const& e) { _size = 1; return _root = new BinNode<T>(e); }
	BinNodePosi(T)insertAsLC(BinNodePosi(T)x, T const& e) { _size++; x->insertAsLc(e); updateHeightAbove(x); return x->lc; }
	BinNodePosi(T)insertAsRC(BinNodePosi(T)x, T const& e) { _size++; x->insertAsRc(e); updateHeightAbove(x); return x->rc; }
	int remove(BinNodePosi(T)x)
	{
		BinNodePosi(T)y = x->parent;
		FromParentTo(*x) = NULL;
		int n = removeAt(x);
		updateHeightAbove(y);
		_size -= n;
		return n;
	}
	static int removeAt(BinNodePosi(T)x)
	{
		if (!x)return 0;
		int n = 1 + removeAt(x->lc) + removeAt(x->rc);
		delete(x);
		return n;
	}
	void inTra(BinNodePosi(T)x)
	{
		if (!x)return;
		inTra(x->lc);
		cout << x->data << ' ';
		inTra(x->rc);
	}
	void preTra(BinNodePosi(T)x)
	{
		if (!x)return;
		cout << x->data << ' ';
		preTra(x->lc);
		preTra(x->rc);
	}
};
template<class T>class BST :public BinTree<T>
{
protected:
	BinNodePosi(T)_hot;
public:
	virtual BinNodePosi(T)& search(const T& e)
	{
		return searchIn(this->_root, e, _hot = NULL);
	}
	static BinNodePosi(T)& searchIn(BinNodePosi(T)& v, const T& e, BinNodePosi(T)& hot)
	{
		if (!v || (e == v->data))return v;
		hot = v;
		return searchIn((v->data < e ? v->rc : v->lc), e, hot);
	}
	virtual BinNodePosi(T)& insert(const T& e)
	{
		BinNodePosi(T)& x = search(e); if (x)return x;
		x = new BinNode<T>(e, _hot);
		this->_size++;
		this->updateHeightAbove(x);
		return x;
	}
	BinNodePosi(T)removeAt(BinNodePosi(T)& x, BinNodePosi(T)& hot)
	{
		BinNodePosi(T)w = x;
		BinNodePosi(T)succ = NULL;
		hot = w->parent;
		if (!HasLChild(*x))
			succ = x = x->rc;
		else if (!HasRChild(*x))
			succ = x = x->lc;
		else
		{
			w = w->succ();
			swap(x->data, w->data);
			//succ = w->rc;
			BinNodePosi(T) u = w->parent;
			((u == x) ? u->rc : u->lc) = succ = w->rc;
		}
		hot = w->parent;
		//FromParentTo(*w) = succ;
		if (succ)
			succ->parent = hot;
		delete w;
		return succ;
	}
	bool remove(const T& e)
	{
		BinNodePosi(T)&x = search(e);
		if (!x)return 0;
		removeAt(x, _hot);
		--this->_size;
		this->updateHeightAbove(_hot);
		return 1;
	}
};
template<class T>class AVL :public BST<T>
{
public:
	BinNodePosi(T)& insert(const T& e)
	{
		BinNodePosi(T)& x = BST<T>::search(e); if (x)return x;
		BinNodePosi(T)xx = x = new BinNode<T>(e, this->_hot); ++this->_size;
		for (BinNodePosi(T)g = this->_hot; g; g = g->parent)
		{
			if (!AvlBalanced(*g))
			{
				FromParentTo(*g) = rotateAt(tallerChild(tallerChild(g)));
				break;
			}
			else
				this->updateHeight(g);
		}
		return xx;
	}
	
	BinNodePosi(T) connect34(
		BinNodePosi(T)a, BinNodePosi(T)b, BinNodePosi(T)c,
		BinNodePosi(T)T0, BinNodePosi(T)T1, BinNodePosi(T)T2, BinNodePosi(T)T3
	)
	{
		a->lc = T0; if (T0)T0->parent = a;
		a->rc = T1; if (T1) T1->parent = a; this->updateHeight(a);
		c->lc = T2; if (T2)T2->parent = c;
		c->rc = T3; if (T3)T3->parent = c; this->updateHeight(c);
		b->lc = a; a->parent = b;
		b->rc = c; c->parent = b; this->updateHeight(b);
		return b;
	}
	BinNodePosi(T)rotateAt(BinNodePosi(T)v)
	{
		BinNodePosi(T)p = v->parent; BinNodePosi(T)g = p->parent;
		if (IsLChild(*p))
			if (IsLChild(*v)) {
				p->parent = g->parent;
				return connect34(v, p, g, v->lc, v->rc, p->rc, g->rc);
			}
			else {
				v->parent = g->parent;
				return connect34(p, v, g, p->lc, v->lc, v->rc, g->rc);
			}
		else
			if (IsRChild(*v)) {
				p->parent = g->parent;
				return connect34(g, p, v, g->lc, p->lc, v->lc, v->rc);
			}
			else {
				v->parent = g->parent;
				return connect34(g, v, p, g->lc, v->lc, v->rc, p->rc);
			}
		
		if (IsRChild(*v))
		{
			if (IsRChild(*p))
			{
				p->parent = g->parent;
				return connect34(g, p, v, g->lc, p->lc, v->lc, v->rc);
			}
			else
			{
				v->parent = g->parent;
				return connect34(p, v, g, p->lc, v->lc, v->rc, g->rc);
			}
		}
		else
		{
			if (IsRChild(*v))
			{
				v->parent = g->parent;
				return connect34(g, v, p, g->lc, v->lc, v->rc, p->rc);
			}
			else
			{
				p->parent = g->parent;
				return connect34(v, p, g, v->lc, v->rc, p->rc, g->rc);
			}
		}
	}

	bool remove(const T& e)
	{
		BinNodePosi(T)& x = BST<T>::search(e); 
		if (!x)return 0;
		this->removeAt(x, this->_hot);
		//this->remove(e);
		//this->preTra(this->_root);
		//cout << endl;
		--this->_size;
		for (BinNodePosi(T)g = this->_hot; g; g = g->parent)
		{
			if (!AvlBalanced(*g))
				g = FromParentTo(*g) = rotateAt(tallerChild(tallerChild(g)));
			this->updateHeight(g);
		}
		return 1;
	}
	
};


int main()
{
	cout << "test1" << endl;
	{
		int arr[] = { 36,27,6,58,53,40,46,69,64 };
		AVL<int>bstTree;
		for (int i = 0; i < 9; ++i)
			bstTree.insert(arr[i]);
		bstTree.inTra(bstTree.root());
		cout << endl;
		int arr2[] = { 69,36,40,46,53 };
		for (int i = 0; i < 5; ++i)
			bstTree.remove(arr2[i]);
		bstTree.inTra(bstTree.root());
		cout << endl;
	}
	getchar();
	cout << "test2" << endl;
	{
		AVL<int>avlTree;
		for (int i = 0; i < 10; ++i)
			avlTree.insert(i);
		avlTree.preTra(avlTree.root());
		cout << endl;
		for (int i = 0; i < 5; ++i) {
			avlTree.remove(i);
		}
		avlTree.inTra(avlTree.root());
	}
	getchar();
	cout << "test3" << endl;
	{
		AVL<int>avl_tree;
		for (int i = 0; i < 100; i += 2)
			avl_tree.insert(i);
		cout << avl_tree.size() << endl;
		avl_tree.inTra(avl_tree.root());
		cout << endl;
		//	avl_tree.remove(1);
		for (int i = 0; i < 100; i += 3)
		{
			avl_tree.remove(i);
		}
		cout << avl_tree.size() << endl;
		avl_tree.inTra(avl_tree.root());
	}
	getchar();
	cout << "test4" << endl;
	{
		AVL<int>avl_tree;
		for (int i = 0; i < 2*1e6; ++i)
			avl_tree.insert(i);
		cout << avl_tree.size() << endl;
		//	avl_tree.remove(1);
		for (int i = 0; i < 2*1e6-100; ++i)
		{
			avl_tree.remove(i);
		}
		cout << avl_tree.size() << endl;
		avl_tree.inTra(avl_tree.root());
		cout << endl;
	}
	getchar();
	cout << "test6" << endl;
	{
		BST<int>avl_tree;
		for (int i = 0; i < 2000; ++i)
			avl_tree.insert(i);
		cout << avl_tree.size() << endl;
		//	avl_tree.remove(1);
		for (int i = 0; i < 2000 - 100; ++i)
		{
			avl_tree.remove(i);
		}
		cout << avl_tree.size() << endl;
		avl_tree.inTra(avl_tree.root());
		cout << endl;
	}
	return 0;
}
