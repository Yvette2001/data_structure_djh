#include<iostream>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
using namespace std;
#define BinNodePosi(T) BinNode<T>*
#define stature(p) ((p)?(p)->height:-1)
#define IsRoot(x) !(x).parent
#define IsLChild(x) (!IsRoot(x)&& (&(x)==(x).parent->lc))
#define IsRChild(x) (!IsRoot(x)&& (&(x)==(x).parent->rc))
#define HasParent(x) !IsRoot(x)
#define HasLChild(x) (x).lc
#define HasRChild(x) (x).rc
#define HasChild(x) (x).lc||(x).rc
#define HasBothChild(x) (x).lc&&(x).rc
#define IsLeaf(x) !HasChild(x)
#define sibling(p)\
	IsLChild(x)? (x)->parent->rc:(x)->parent->lc
#define FromParentTo(x)\
	(IsRoot(x)?_root:(IsLChild(x)?(x).parent->lc:(x).parent->rc))
typedef enum{RB_RED,RB_BLACK}RBCOLOR;
template<class T>
struct BinNode
{
	T data;
	BinNodePosi(T)parent; BinNodePosi(T)lc; BinNodePosi(T)rc;
	int height;
	int npl;
	RBCOLOR color;
	BinNode() :
		parent(NULL), lc(NULL), rc(NULL), height(0), npl(1), color(RB_RED) {};
	BinNode(T e, BinNodePosi(T) p = NULL, BinNodePosi(T) l = NULL, BinNodePosi(T) r = NULL, int h = 0, int np = 1 , RBCOLOR c = RB_RED) :
		data(e),parent(p),lc(l),rc(r),height(h),npl(np),color(c){}
	int size()
	{
		int s = 1;
		if (lc)
			s+= lc->size();
		if (rc)
			s += rc->size();
		return s;
	}
	BinNodePosi(T)insertAsLc(T const& e)
	{
		return lc = new BinNode(e, this);
	}
	BinNodePosi(T)insertAsRc(T const& e)
	{
		return rc = new BinNode(e, this);
	}
	bool operator<(BinNode const& bn) { return data < bn.data; }
	bool operator==(BinNode const& bn) { return data == bn.data; }
	bool operator<=(BinNode const& bn) { return data <= bn.data; }
	bool operator>=(BinNode const& bn) { return data >= bn.data; }
	bool operator!=(BinNode const& bn) { return data != bn.data; }
};
template<class T>class BinTree
{
protected:
	int _size; BinNodePosi(T)_root;
	virtual int updateHeight(BinNodePosi(T)x)
	{
		return x->height = 1 + max(stature(x->lc), stature(x->rc));
	}
	void updateHeightAbove(BinNodePosi(T)x)
	{
		while (x)
		{
			int lasHeight = x->height;
			updateHeight(x);
			if (lasHeight == x->height)
				break;
			x = x->parent;
		}
	}
public:
	BinTree() :_size(0), _root(NULL) {}
	~BinTree() { if (0 < _size)remove(_root); }
	int size()const { return _size; }
	bool empty()const { return !_size; }
	BinNodePosi(T)root()const { return _root; }
	BinNodePosi(T)insertAsRoot(T const& e) { _size = 1; return _root = new BinNode<T>(e); }
	BinNodePosi(T)insertAsLC(BinNodePosi(T)x, T const& e) { _size++; x->insertAsLc(e); updateHeightAbove(x); return x->lc; }
	BinNodePosi(T)insertAsRC(BinNodePosi(T)x, T const& e) { _size++; x->insertAsRc(e); updateHeightAbove(x); return x->rc; }
	int remove(BinNodePosi(T)x)
	{
		BinNodePosi(T)y = x->parent;
		FromParentTo(*x) = NULL;
		int n = removeAt(x);
		updateHeightAbove(y);
		_size -= n;
		return n;
	}
	static int removeAt(BinNodePosi(T)x)
	{
		if (!x)return 0;
		int n = 1 + removeAt(x->lc) + removeAt(x->rc);
		delete(x);
		return n;
	}
	void preTra(BinNodePosi(T)x)
	{
		if (!x)return;
		preTra(x->lc);
		cout << x->data << ' ';
		preTra(x->rc);
	}
};
int main()
{
	BinTree<int>bt;
	bt.insertAsRoot(1);
	bt.insertAsLC(bt.root(),2);
	bt.insertAsRC(bt.root(), 3);
	bt.insertAsLC(bt.root()->lc, 4);
	bt.insertAsRC(bt.root()->lc, 5);
	bt.insertAsLC(bt.root()->rc, 6);
	bt.insertAsRC(bt.root()->rc, 7);
	bt.preTra(bt.root());
	cout << endl;
	bt.remove(bt.root()->rc);
	bt.preTra(bt.root());
	return 0;
}
