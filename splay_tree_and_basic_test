#include<iostream>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
using namespace std;
#define BinNodePosi(T) BinNode<T>*
#define stature(p) ((p)?(p)->height:-1)
#define IsRoot(x) !(x).parent
#define IsLChild(x) (!IsRoot(x)&& (&(x)==(x).parent->lc))
#define IsRChild(x) (!IsRoot(x)&& (&(x)==(x).parent->rc))
#define HasParent(x) !IsRoot(x)
#define HasLChild(x) (x).lc
#define HasRChild(x) (x).rc
#define HasChild(x) (x).lc||(x).rc
#define HasBothChild(x) (x).lc&&(x).rc
#define IsLeaf(x) !HasChild(x)
#define sibling(p)\
	IsLChild(x)? (x)->parent->rc:(x)->parent->lc
#define FromParentTo(x)\
	(IsRoot(x)?this->_root:(IsLChild(x)?(x).parent->lc:(x).parent->rc))
typedef enum { RB_RED, RB_BLACK }RBCOLOR;
template<class T>
struct BinNode
{
	T data;
	BinNodePosi(T)parent; BinNodePosi(T)lc; BinNodePosi(T)rc;
	int height;
	int npl;
	RBCOLOR color;
	BinNode() :
		parent(NULL), lc(NULL), rc(NULL), height(0), npl(1), color(RB_RED) {};
	BinNode(T e, BinNodePosi(T) p = NULL, BinNodePosi(T) l = NULL, BinNodePosi(T) r = NULL, int h = 0, int np = 1, RBCOLOR c = RB_RED) :
		data(e), parent(p), lc(l), rc(r), height(h), npl(np), color(c) {}
	int size()
	{
		int s = 1;
		if (lc)
			s += lc->size();
		if (rc)
			s += rc->size();
		return s;
	}
	BinNodePosi(T)insertAsLc(T const& e)
	{
		return lc = new BinNode(e, this);
	}
	BinNodePosi(T)insertAsRc(T const& e)
	{
		return rc = new BinNode(e, this);
	}
	BinNodePosi(T)succ()
	{
		BinNodePosi(T)s = this;
		if (rc)
		{
			s = rc;
			while (s->lc)s = s->lc;
		}
		else
		{
			while (IsRChild(*s))s = s->parent;
			s = s->parent;
		}
		return s;
	}
	bool operator<(BinNode const& bn) { return data < bn.data; }
	bool operator==(BinNode const& bn) { return data == bn.data; }
	bool operator<=(BinNode const& bn) { return data <= bn.data; }
	bool operator>=(BinNode const& bn) { return data >= bn.data; }
	bool operator!=(BinNode const& bn) { return data != bn.data; }
};
template<class T>class BinTree
{
protected:
	int _size; BinNodePosi(T)_root;
	virtual int updateHeight(BinNodePosi(T)x)
	{
		return x->height = 1 + max(stature(x->lc), stature(x->rc));
	}
	void updateHeightAbove(BinNodePosi(T)x)
	{
		while (x)
		{
			int lasHeight = x->height;
			updateHeight(x);
			if (lasHeight == x->height)
				break;
			x = x->parent;
		}
	}
public:
	BinTree() :_size(0), _root(NULL) {}
//	BinTree(int e,BinNodePosi(T) p=NULL,BinNodePosi(T) lc=NULL,BinNodePosi(T) rc=NULL):_root(e,p,lc,rc){}
	~BinTree() { if (0 < _size)remove(_root); }
	int size()const { return _size; }
	bool empty()const { return !_size; }
	BinNodePosi(T)root()const { return _root; }
	BinNodePosi(T)insertAsRoot(T const& e) { _size = 1; return _root = new BinNode<T>(e); }
	BinNodePosi(T)insertAsLC(BinNodePosi(T)x, T const& e) { _size++; x->insertAsLc(e); updateHeightAbove(x); return x->lc; }
	BinNodePosi(T)insertAsRC(BinNodePosi(T)x, T const& e) { _size++; x->insertAsRc(e); updateHeightAbove(x); return x->rc; }
	int remove(BinNodePosi(T)x)
	{
		BinNodePosi(T)y = x->parent;
		FromParentTo(*x) = NULL;
		int n = removeAt(x);
		updateHeightAbove(y);
		_size -= n;
		return n;
	}
	static int removeAt(BinNodePosi(T)x)
	{
		if (!x)return 0;
		int n = 1 + removeAt(x->lc) + removeAt(x->rc);
		delete(x);
		return n;
	}
	void inTra(BinNodePosi(T)x)
	{
		if (!x)return;
		inTra(x->lc);
		cout << x->data << ' ';
		inTra(x->rc);
	}
	void preTra(BinNodePosi(T)x)
	{
		if (!x)return;
		cout << x->data << ' ';
		preTra(x->lc);
		preTra(x->rc);
	}
};
template<class T>class BST :public BinTree<T>
{
protected:
	BinNodePosi(T)_hot;
public:
	virtual BinNodePosi(T)& search(const T& e)
	{
		return searchIn(this->_root, e, _hot = NULL);
	}
	static BinNodePosi(T)& searchIn(BinNodePosi(T)& v, const T& e, BinNodePosi(T)& hot)
	{
		if (!v || (e == v->data))return v;
		hot = v;
		return searchIn((v->data < e ? v->rc : v->lc), e, hot);
	}
	virtual BinNodePosi(T) insert(const T& e)
	{
		BinNodePosi(T)& x = search(e); if (x)return x;
		x = new BinNode<T>(e, _hot);
		this->_size++;
		this->updateHeightAbove(x);
		return x;
	}
	BinNodePosi(T)removeAt(BinNodePosi(T)& x, BinNodePosi(T)& hot)
	{
		BinNodePosi(T)w = x;
		BinNodePosi(T)succ = NULL;
		//hot = w->parent;
		if (!HasLChild(*x))
			succ = x = x->rc;
		else if (!HasRChild(*x))
			succ = x = x->lc;
		else
		{
			w = w->succ();
			swap(x->data, w->data);
			//succ = w->rc;
			BinNodePosi(T) u = w->parent;
			((u == x) ? u->rc : u->lc) = succ = w->rc;
		}
		//cout << (w->parent->rc == x);
		hot = w->parent;
		//FromParentTo(*w) = succ;
		if (succ)
			succ->parent = hot;
		delete w;
		return succ;
	}
	bool remove(const T& e)
	{
		BinNodePosi(T)& x = search(e);
		if (!x)return 0;
		removeAt(x, _hot);
		--this->_size;
		this->updateHeightAbove(_hot);
		return 1;
	}
};
template <typename NodePosi> inline //在节点*p与*lc(可能为空)之间建立父(左)子关系
	void attachAsLChild(NodePosi p, NodePosi l) { p->lc = l; if (l) l->parent = p; }

template <typename NodePosi> inline //在节点*p与*rc(可能为空)之间建立父(右)子关系
	void attachAsRChild(NodePosi p, NodePosi r) { p->rc = r; if (r) r->parent = p; }

template<class T>class Splay :public BST<T>
{
protected:BinNodePosi(T) splay(BinNodePosi(T)v)
{
	if (!v)return NULL; BinNodePosi(T) p; BinNodePosi(T)g;
	
	//int cnt[4] = { 0 };
	while ((p = v->parent) && (g = p->parent))
	{
		BinNodePosi(T)gg = g->parent;
	//	cout << v->data << ' ' << p->data << ' ' << g->data << ' ';
		if(IsLChild(*v))
			if (IsLChild(*p))
			{
				attachAsLChild(g, p->rc);
				attachAsLChild(p, v->rc);
				attachAsRChild(p, g);
				attachAsRChild(v, p);
			//	cout << ++cnt[0] << 'a' << endl;
			}
			else
			{
				attachAsRChild(g, v->lc);
				attachAsLChild(p, v->rc);
				attachAsLChild(v, g);
				attachAsRChild(v, p);
			//	cout << ++cnt[1] << 'b'<<endl;
			}
		else
		{
			if (IsRChild(*p))
			{
				attachAsRChild(g, p->lc);
				attachAsRChild(p, v->lc);
				attachAsLChild(p, g);
				attachAsLChild(v, p);
			//	cout << ++cnt[2] << 'c'<<endl;
			}
			else
			{
				attachAsLChild(p, v->lc);
				attachAsRChild(g, v->rc);
				attachAsLChild(v, p);
				attachAsRChild(v, g);
			//	cout << ++cnt[3] <<'d'<< endl;
			}
		}
	//	cout << v->data << ' ' << p->data << ' ' << g->data << endl;
		if (!gg) { v->parent = NULL;}
		else
			(g == gg->lc) ? attachAsLChild(gg, v) : attachAsRChild(gg, v);
		this->updateHeight(g); this->updateHeight(p); this->updateHeight(v);
	}
	if (p = v->parent) {
		if (IsLChild(*v))
		{
			attachAsLChild(p, v->rc);
			attachAsRChild(v, p);
		}
		else
		{
			attachAsRChild(p, v->lc);
			attachAsLChild(v, p);
		}
	}
	v->parent = NULL;
	return v;
}
		
public:
	BinNodePosi(T)& search(const T& e)
	{
		BinNodePosi(T)p = this->searchIn(this->_root, e, this->_hot = NULL);
		this->_root = splay(p ? p : this->_hot);
		return this->_root;
	}
	BinNodePosi(T)insert(const T& e)
	{
		if (!this->_root) { this->_size++; return this->_root = new BinNode<T>(e); }
		if (e == search(e)->data)return this->_root;
		++this->_size; BinNodePosi(T)t = this->_root;
		if (this->_root->data < e)
		{
			t->parent = this->_root = new BinNode<T>(e, NULL, t, t->rc);
			if (HasRChild(*t)) { t->rc->parent = this->_root; t->lc = NULL; }
		}
		else
		{
			t->parent = this->_root = new BinNode<T>(e, NULL, t->lc, t);
			if (HasLChild(*t)) { t->lc->parent = this->_root; t->rc = NULL; }
		}
		this->updateHeight(t);
		return this->_root;
	}
	bool remove(const T& e)
	{
		if (!this->_root)return 0;
		if((e != search(e)->data))return 0;
		BinNodePosi(T)w = this->_root;
		if (!HasLChild(*this->_root))
		{
			this->_root = this->_root->rc; if (this->_root)this->_root->parent = NULL;
		}
		else if (!HasRChild(*this->_root))
		{
			this->_root = this->_root->lc; if (this->_root)this->_root -> parent = NULL;
		}
		else
		{
			BinNodePosi(T)lChild = this->_root->lc;
			lChild->parent = NULL; this->_root->lc = NULL;
			this->_root = this->_root->rc; this->_root->parent = NULL;
			search(w->data);
			this->_root->lc = lChild; lChild->parent = this->_root;
		}
		delete w;
		--this->_size;
		if (this->_root)this->updateHeight(this->_root);
		return 1;
	}
};
int main()
{
	cout << "test1: " << endl;
	{
		Splay<int>sp;
		for (int i = 0; i < 100; ++i)
			sp.insert(i);
		for (int i = 0; i < 80; ++i)
		{
			sp.remove(i);
		}
		sp.inTra(sp.root());
	}

	return 0;
}
